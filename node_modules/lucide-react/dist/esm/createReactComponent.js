function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { forwardRef, createElement } from 'react';
import PropTypes from 'prop-types';
export default (function (iconName, _ref) {
  var tag = _ref[0],
      attrs = _ref[1],
      children = _ref[2];
  var Component = forwardRef(function (_ref2, ref) {
    var _ref2$color = _ref2.color,
        color = _ref2$color === void 0 ? 'currentColor' : _ref2$color,
        _ref2$size = _ref2.size,
        size = _ref2$size === void 0 ? 24 : _ref2$size,
        _ref2$width = _ref2.width,
        width = _ref2$width === void 0 ? 2 : _ref2$width,
        rest = _objectWithoutPropertiesLoose(_ref2, ["color", "size", "width"]);

    return createElement(tag, _extends({
      ref: ref
    }, attrs, {
      width: size,
      height: size,
      color: color,
      strokeWidth: width
    }, rest), children.map(function (_ref3) {
      var childTag = _ref3[0],
          childAttrs = _ref3[1];
      return createElement(childTag, childAttrs);
    }));
  });
  Component.propTypes = {
    color: PropTypes.string,
    size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
  };
  Component.displayName = "" + iconName;
  return Component;
});